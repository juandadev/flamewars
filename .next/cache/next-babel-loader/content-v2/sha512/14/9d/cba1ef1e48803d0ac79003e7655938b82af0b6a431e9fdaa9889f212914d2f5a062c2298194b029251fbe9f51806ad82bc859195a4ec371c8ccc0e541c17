{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/anthonygonzalez/development/tests/nextjs-socketio/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/anthonygonzalez/development/tests/nextjs-socketio/pages/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nvar ENDPOINT = 'http://localhost:3000';\n\nfunction useSocket(url) {\n  _s();\n\n  var _useState = useState(null),\n      socket = _useState[0],\n      setSocket = _useState[1];\n\n  useEffect(function () {\n    var socketIo = io(url);\n    setSocket(socketIo);\n\n    function cleanup() {\n      socketIo.disconnect();\n    }\n\n    return cleanup;\n  }, []);\n  return socket;\n}\n\n_s(useSocket, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\n\nexport var __N_SSG = true;\nexport default function Homepage(_ref) {\n  _s2();\n\n  var _this = this;\n\n  var messages = _ref.messages;\n\n  var _useState2 = useState([]),\n      localMessages = _useState2[0],\n      setLocalMessages = _useState2[1];\n\n  var _useState3 = useState(''),\n      field = _useState3[0],\n      setField = _useState3[1];\n\n  var _useState4 = useState(false),\n      sendit = _useState4[0],\n      setsendit = _useState4[1];\n\n  var socket = useSocket('http://localhost:3000');\n  useEffect(function () {\n    console.log('useEffect');\n\n    if (socket) {\n      socket.on(\"message\", handleMessage);\n    }\n  }, [socket]);\n\n  var handleMessage = function handleMessage(msg) {\n    setLocalMessages(function (oldMessages) {\n      return [].concat(_toConsumableArray(oldMessages), [msg]);\n    });\n  };\n\n  var handleChange = function handleChange(e) {\n    setField(e.target.value);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var msg = {\n      id: new Date().getTime(),\n      value: field\n    };\n    console.log(msg);\n    socket.emit('message', msg); // setLocalMessages(oldMessages => [...oldMessages, msg])\n\n    setField('');\n    setsendit(!sendit);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [localMessages ? localMessages.map(function (message) {\n      console.log(localMessages);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: message.value\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 24\n      }, _this);\n    }) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        placeholder: \"Escribe algo\",\n        value: field\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Homepage, \"HGjBd/w3A9spWpDCIu4f3QpO0PE=\", false, function () {\n  return [useSocket];\n});\n\n_c = Homepage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"sources":["/Users/anthonygonzalez/development/tests/nextjs-socketio/pages/index.js"],"names":["React","useEffect","useState","socketIOClient","ENDPOINT","useSocket","url","socket","setSocket","socketIo","io","cleanup","disconnect","Homepage","messages","localMessages","setLocalMessages","field","setField","sendit","setsendit","console","log","on","handleMessage","msg","oldMessages","handleChange","e","target","value","handleSubmit","preventDefault","id","Date","getTime","emit","map","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = 'http://localhost:3000';\n\nfunction useSocket(url) {\n  const [socket, setSocket] = useState(null)\n  useEffect(() => {\n    const socketIo = io(url)\n    setSocket(socketIo)\n    function cleanup() {\n      socketIo.disconnect()\n    }\n    return cleanup\n  }, [])\n  return socket\n}\n\nexport default function Homepage({messages}) {\n    const [localMessages, setLocalMessages] = useState([])\n    const [field, setField] = useState('')\n    const [sendit, setsendit] = useState(false)\n    const socket = useSocket('http://localhost:3000')\n    \n    useEffect(() => {\n        console.log('useEffect');\n        if(socket){\n            socket.on(\"message\", handleMessage);\n        }\n    }, [socket])\n\n    let handleMessage = msg => {\n        setLocalMessages(oldMessages => [...oldMessages, msg])\n    }\n\n    let handleChange = e => {\n        setField(e.target.value)\n    }\n\n    let handleSubmit  = e => {\n        e.preventDefault()\n        let msg = {\n            id: new Date().getTime(),\n            value: field\n        }\n        console.log(msg);\n        socket.emit('message', msg)\n        // setLocalMessages(oldMessages => [...oldMessages, msg])\n        setField('')\n        setsendit(!sendit)\n    }\n\n    return (\n        <div>\n            {localMessages ? localMessages.map(message => {\n                console.log(localMessages);\n                return <li key={message.id}>{message.value}</li>\n            }): null}\n            <form onSubmit={handleSubmit}>\n                <input\n                    onChange={handleChange}\n                    type='text'\n                    placeholder='Escribe algo'\n                    value={field}\n                />\n                <button>Enviar</button>\n            </form>\n        </div>\n    )\n}\n\nexport async function getStaticProps(context) {\n    let res = await fetch('http://localhost:3000/messages')\n    let messages = await res.json()\n\n    return {\n      props: { messages }, // will be passed to the page component as props\n    }\n}\n"]},"metadata":{},"sourceType":"module"}