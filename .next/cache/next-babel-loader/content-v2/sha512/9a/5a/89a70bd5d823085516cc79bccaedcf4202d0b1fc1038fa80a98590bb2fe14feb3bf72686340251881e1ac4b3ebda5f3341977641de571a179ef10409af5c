{"ast":null,"code":"import _toConsumableArray from \"/Users/anthonygonzalez/development/tests/nextjs-socketio/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/anthonygonzalez/development/tests/nextjs-socketio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nvar NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nvar SOCKET_SERVER_URL = \"http://localhost:3000\";\n\nvar useChat = function useChat(roomId) {\n  _s();\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessages = _useState[1];\n\n  var socketRef = useRef();\n  useEffect(function () {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId: roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, function (message) {\n      var incomingMessage = _objectSpread(_objectSpread({}, message), {}, {\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      });\n\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [incomingMessage]);\n      });\n    });\n    return function () {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  var sendMessage = function sendMessage(messageBody) {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id\n    });\n  };\n\n  return {\n    messages: messages,\n    sendMessage: sendMessage\n  };\n};\n\n_s(useChat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n\nexport default useChat;","map":{"version":3,"sources":["/Users/anthonygonzalez/development/tests/nextjs-socketio/hooks/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","socketRef","current","query","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAMC,sBAAsB,GAAG,gBAA/B;AACA,IAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAY;AAAA;;AAAA,kBACML,QAAQ,CAAC,EAAD,CADd;AAAA,MACnBM,QADmB;AAAA,MACTC,WADS;;AAE1B,MAAMC,SAAS,GAAGT,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,SAAS,CAACC,OAAV,GAAoBR,cAAc,CAACE,iBAAD,EAAoB;AACpDO,MAAAA,KAAK,EAAE;AAAEL,QAAAA,MAAM,EAANA;AAAF;AAD6C,KAApB,CAAlC;AAIAG,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBT,sBAArB,EAA6C,UAACU,OAAD,EAAa;AACxD,UAAMC,eAAe,mCAChBD,OADgB;AAEnBE,QAAAA,kBAAkB,EAAEF,OAAO,CAACG,QAAR,KAAqBP,SAAS,CAACC,OAAV,CAAkBO;AAFxC,QAArB;;AAIAT,MAAAA,WAAW,CAAC,UAACD,QAAD;AAAA,4CAAkBA,QAAlB,IAA4BO,eAA5B;AAAA,OAAD,CAAX;AACD,KAND;AAQA,WAAO,YAAM;AACXL,MAAAA,SAAS,CAACC,OAAV,CAAkBQ,UAAlB;AACD,KAFD;AAGD,GAhBQ,EAgBN,CAACZ,MAAD,CAhBM,CAAT;;AAkBA,MAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,WAAD,EAAiB;AACnCX,IAAAA,SAAS,CAACC,OAAV,CAAkBW,IAAlB,CAAuBlB,sBAAvB,EAA+C;AAC7CmB,MAAAA,IAAI,EAAEF,WADuC;AAE7CJ,MAAAA,QAAQ,EAAEP,SAAS,CAACC,OAAV,CAAkBO;AAFiB,KAA/C;AAID,GALD;;AAOA,SAAO;AAAEV,IAAAA,QAAQ,EAARA,QAAF;AAAYY,IAAAA,WAAW,EAAXA;AAAZ,GAAP;AACD,CA9BD;;GAAMd,O;;AAgCN,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:3000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}