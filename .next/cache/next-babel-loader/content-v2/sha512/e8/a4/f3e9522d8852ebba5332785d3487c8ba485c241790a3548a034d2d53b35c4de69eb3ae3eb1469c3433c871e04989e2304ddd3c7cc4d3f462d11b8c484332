{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"message\"; // Name of the event\n\nconst SOCKET_SERVER_URL = \"http://localhost:3000/messages\";\n\nconst useChat = roomId => {\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]); // Sent and received messages\n\n  const socketRef = useRef();\n  useEffect(() => {\n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL); // Listens for incoming messages\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = _objectSpread(_objectSpread({}, message), {}, {\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      });\n\n      setMessages(messages => [...messages, incomingMessage]);\n    }); // Destroys the socket reference\n    // when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); // Sends a message to the server that\n  // forwards it to all users in the same room\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      value: messageBody,\n      senderId: socketRef.current.id,\n      id: new Date().getTime()\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["/Users/anthonygonzalez/development/tests/nextjs-socketio/hooks/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","socketRef","current","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","value","Date","getTime"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,SAA/B,C,CAA0C;;AAC1C,MAAMC,iBAAiB,GAAG,gCAA1B;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAC1B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,EAAD,CAAxC,CAD0B,CACoB;;AAC9C,QAAMQ,SAAS,GAAGT,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEd;AACAU,IAAAA,SAAS,CAACC,OAAV,GAAoBR,cAAc,CAACE,iBAAD,CAAlC,CAHc,CAKd;;AACAK,IAAAA,SAAS,CAACC,OAAV,CAAkBC,EAAlB,CAAqBR,sBAArB,EAA8CS,OAAD,IAAa;AACxD,YAAMC,eAAe,mCAChBD,OADgB;AAEnBE,QAAAA,kBAAkB,EAAEF,OAAO,CAACG,QAAR,KAAqBN,SAAS,CAACC,OAAV,CAAkBM;AAFxC,QAArB;;AAIAR,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcM,eAAd,CAAf,CAAX;AACD,KAND,EANc,CAcd;AACA;;AACA,WAAO,MAAM;AACXJ,MAAAA,SAAS,CAACC,OAAV,CAAkBO,UAAlB;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACX,MAAD,CAnBM,CAAT,CAJ0B,CAyB1B;AACA;;AACA,QAAMY,WAAW,GAAIC,WAAD,IAAiB;AACnCV,IAAAA,SAAS,CAACC,OAAV,CAAkBU,IAAlB,CAAuBjB,sBAAvB,EAA+C;AAC7CkB,MAAAA,KAAK,EAAEF,WADsC;AAE7CJ,MAAAA,QAAQ,EAAEN,SAAS,CAACC,OAAV,CAAkBM,EAFiB;AAG7CA,MAAAA,EAAE,EAAE,IAAIM,IAAJ,GAAWC,OAAX;AAHyC,KAA/C;AAKD,GAND;;AAQA,SAAO;AAAEhB,IAAAA,QAAF;AAAYW,IAAAA;AAAZ,GAAP;AACD,CApCD;;AAsCA,eAAeb,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"message\"; // Name of the event\nconst SOCKET_SERVER_URL = \"http://localhost:3000/messages\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n  const socketRef = useRef();\n\n  useEffect(() => {\n    \n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n    \n    // Listens for incoming messages\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    \n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      value: messageBody,\n      senderId: socketRef.current.id,\n      id: new Date().getTime()\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;"]},"metadata":{},"sourceType":"module"}